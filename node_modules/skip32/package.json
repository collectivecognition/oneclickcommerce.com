{
  "name": "skip32",
  "description": "skip32 (Skipjack cipher for 32-bit numbers) for node",
  "version": "1.0.2",
  "contributors": [
    {
      "name": "Ken Woodruff",
      "email": "ken.woodruff@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/femto113/node-skip32.git"
  },
  "main": "build/Release/skip32.node",
  "engines": {
    "node": ">= 0.4.7"
  },
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "# skip32\n\nThis is a node binding for skip32.c by Greg Rose found here:\n\nhttp://www.qualcomm.com.au/PublicationsDocs/skip32.c\n\nSKIP32 is a 80-bit key, 32-bit block symmetric cipher based on [Skipjack](http://en.wikipedia.org/wiki/Skipjack_%28cipher%29).\nIt has the uncommon properties of being fast, creating very dissimilar encrypted values for consecutive\ninput values, and producing output of the same size as the input (32-bit).  These make this cipher\nparticularly useful for obfuscating series of 32-bit integers (e.g. auto-incremented database ids).\nIt is probably not appropriate for general cryptography.\n\nCF. http://search.cpan.org/~esh/Crypt-Skip32-0.17/lib/Crypt/Skip32.pm for more discussion.\n\n## Install\n\n    npm install skip32\n\nor\n\n    git clone http://github.com/femto113/node-skip32.git\n    cd skip32\n    npm link\n\n## Example\n\n    var Skip32 = require(\"skip32\").Skip32;\n\n    // 80-bit key is provided to constructor as array of up to 10 bytes\n    var cipher = new Skip32([0x9b, 0x21, 0x96, 0xe, 0x1a, 0xcf, 0x24, 0x5f, 0x14, 0x93]);\n\n    // NOTE: unlike the objects created by crypto.createCipher,\n    //       a Skip32 instance can be reused an unlimited number of times\n\n    // encrypt/decrypt take and return 32-bit unsigned integers (uint32)\n    var e = cipher.encrypt(1);\n    // e == 585760678\n    var d = cipher.decrypt(e);\n    // d == 1\n    a = [cipher.encrypt(2), cipher.encrypt(3), cipher.encrypt(4)];\n    // a == [ 534177265, 2331760290, 3033114818 ]\n\n    // node's built in hash algorithms can be handy for making keys, e.g.\n    var key = require('crypto').createHash('md5').update(\"some text here\").\n              digest().substring(0, 10).split('').map(function (c) { return c.charCodeAt() });\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/femto113/node-skip32/issues"
  },
  "_id": "skip32@1.0.2",
  "_from": "skip32@*"
}
